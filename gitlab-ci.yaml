image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - release
  - preprod
  - integration
  - prod
      
build:
  stage: build
  script:
    - echo "This is a build step"

test:
  stage: test
  script:
    - echo "This is a test step"

integration:
  stage: integration
  script:
    - echo "This is an integration step"
    - exit 1
  allow_failure: true # Even if the job fails, continue to the next stages

prod:
  stage: prod
  script:
    - echo "This is a deploy step"
  when: manual # Continuous Delivery

safety:
  stage: test
  before_script:
    - apk add py-pip
  script:
    - docker pull hysnsec/safety
    - docker run --rm --user $(id -u):$(id -g) -v $(pwd):/src hysnsec/safety check -r requirements.txt --json > safety-output.json
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file safety-output.json --scanner "Safety Scan"
  artifacts:
    paths: [safety-output.json]
    when: always
  allow_failure: true

retirejs:
  image: node:alpine3.10
  before_script:
    - apk add py-pip
  script:
    - npm install
    - npm install -g retire
    - retire --outputformat json --outputpath retirejs-output.json --severity high --exitwith 0
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file retirejs-output.json --scanner "Retirejs Scan"
  artifacts:
    paths: [retirejs-output.json]
    when: always
  allow_failure: true

truffleHog:
  stage: build
  before_script:
    - apk add py-pip git 
    - git checkout master
  script:
    - docker pull hysnsec/trufflehog
    - docker run --rm --user $(id -u):$(id -g) -v $(pwd):/src hysnsec/trufflehog file:///src --json | tee trufflehog-output.json
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file trufflehog-output.json --scanner "truffleHog Scan"
  artifacts:
    paths: [trufflehog-output.json]
    when: always
  allow_failure: true

bandit:
  stage: build
  before_script:
    - apk add py-pip
  script:
    - docker pull hysnsec/bandit
    - docker run --rm --user $(id -u):$(id -g) -v $(pwd):/src hysnsec/bandit -r /src -f json -o /src/bandit-output.json
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file bandit-output.json --scanner "Bandit Scan"
  artifacts:
    paths: [bandit-output.json]
    when: always
  allow_failure: true

zap:
  stage: integration
  before_script:
    - apk add py-pip
  script:
    - docker pull owasp/zap2docker-stable
    - docker run --rm --user $(id -u):$(id -g) -w /zap -v $(pwd):/zap/wrk:rw owasp/zap2docker-stable zap-baseline.py -t $PROD_HOST -x zap-output.xml
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file zap-output.xml --scanner "ZAP Scan"
  artifacts:
    paths: [zap-output.xml]
    when: always
  allow_failure: true

nikto:
  stage: integration
  before_script:
    - apk add py-pip
  script:
    - docker pull hysnsec/nikto
    - docker run --rm -v $(pwd):/tmp hysnsec/nikto -h prod-Qn8Qvy2c -o /tmp/nikto-output.xml
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file nikto-output.xml --scanner "Nikto Scan"
  artifacts:
    paths: [nikto-output.xml]
    when: always
  allow_failure: true

sslscan:
  stage: integration
  before_script:
    - apk add py-pip
  script:
    - docker pull hysnsec/sslyze
    - docker run --rm -v $(pwd):/tmp hysnsec/sslyze --regular prod-Qn8Qvy2c.lab.practical-devsecops.training:443 --json_out /tmp/sslyze-output.json
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file sslyze-output.json --scanner "Sslyze Scan"
  artifacts:
    paths: [sslyze-output.json]
    when: always
  allow_failure: true

nmap:
  stage: integration
  before_script:
    - apk add py-pip
  script:
    - docker pull hysnsec/nmap
    - docker run --rm -v $(pwd):/tmp hysnsec/nmap prod-Qn8Qvy2c -oX /tmp/nmap-output.xml
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file nmap-output.xml --scanner "Nmap Scan"
  artifacts:
    paths: [nmap-output.xml]
    when: always
  allow_failure: true
